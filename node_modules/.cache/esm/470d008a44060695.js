let readdirSync,realpathSync,clone,chalk,has,listFiles,convertToFullpath,modifyMigrate,createQueryFile,createControllerFile,createRouterFile,modifyRouteIndex;_440‍.x([["RelationsEnum",()=>RelationsEnum],["getConfigEndpoint",()=>getConfigEndpoint],["startGenerate",()=>startGenerate]]);_440‍.w("fs",[["readdirSync",["readdirSync"],function(v){readdirSync=v}],["realpathSync",["realpathSync"],function(v){realpathSync=v}]]);_440‍.w("git-clone",[["default",["clone"],function(v){clone=v}]]);_440‍.w("chalk",[["default",["chalk"],function(v){chalk=v}]]);_440‍.w("./utils",[["has",["has"],function(v){has=v}],["listFiles",["listFiles"],function(v){listFiles=v}],["convertToFullpath",["convertToFullpath"],function(v){convertToFullpath=v}],["modifyMigrate",["modifyMigrate"],function(v){modifyMigrate=v}]]);_440‍.w("./template_generator/query",[["createQueryFile",["createQueryFile"],function(v){createQueryFile=v}]]);_440‍.w("./template_generator/controller",[["createControllerFile",["createControllerFile"],function(v){createControllerFile=v}]]);_440‍.w("./template_generator/router",[["createRouterFile",["createRouterFile"],function(v){createRouterFile=v}],["modifyRouteIndex",["modifyRouteIndex"],function(v){modifyRouteIndex=v}]]);












async function checkProject(files = [], domain) {
  //check src
  _440‍.a("has",has)(files, ["src", "stacker.json", "public", "private"]);
  //check files
  let srcFiles = await _440‍.a("listFiles",listFiles)("./src");
  srcFiles = await _440‍.a("convertToFullpath",convertToFullpath)(srcFiles);
  _440‍.a("has",has)(srcFiles, [
    "config.ts",
    "constants.ts",
    "server.ts",
    "utils.ts",
    "route",
    "middleware",
    "database",
    "controller",
  ]);

  const routeFiles = await _440‍.a("listFiles",listFiles)("./src/route");
  const middlewareFiles = await _440‍.a("listFiles",listFiles)("./src/middleware");
  const databaseFiles = await _440‍.a("listFiles",listFiles)("./src/database");
  _440‍.a("has",has)(routeFiles, ["index.ts"]);
  _440‍.a("has",has)(middlewareFiles, ["index.ts"]);
  _440‍.a("has",has)(databaseFiles, ["index.ts", "migrate.ts", "query"]);
  return true;
}

       const RelationsEnum = {
  normal: "NORMAL",
  has_fk: "HAS_FK",
  relate_with: "RELATE_WITH",
};;_440‍.j(["RelationsEnum"]);

async function getRelation(endpoint) {
  const endpoints = await getConfigEndpoints();
  const relate_tables = endpoints
    .filter(
      (e) => e.relations.filter((r) => r.table === endpoint.name).length !== 0
    )
    .map((e) => ({
      table: e.name,
      field: e.relations.filter((r) => r.table === endpoint.name)[0].field,
    }));
  return {
    relate_tables: relate_tables,
    fk_relations: endpoint.relations,
  };
}

async function generateEndpoint(endpoint) {
  _440‍.g.console.log(_440‍.a("chalk",chalk).yellowBright(`Generating Endpoint ${endpoint.name}...`));
  //check relations
  const relations = await getRelation(endpoint);
  //create migrate
  if (!(await _440‍.a("modifyMigrate",modifyMigrate)(endpoint))) return false;
  //create database query
  if (!(await _440‍.a("createQueryFile",createQueryFile)(endpoint, relations))) return false;
  //create controller
  if (!(await _440‍.a("createControllerFile",createControllerFile)(endpoint))) return false;
  //create route
  if (!(await _440‍.a("createRouterFile",createRouterFile)(endpoint))) return false;
  if (!(await _440‍.a("modifyRouteIndex",modifyRouteIndex)(endpoint))) return false;
  _440‍.g.console.log(_440‍.a("chalk",chalk).green(`Endpoint ${endpoint.name} Generated`));
  return true;
}

       async function getConfigEndpoint(name) {
  const endpoints = await getConfigEndpoints();
  const endpoint = endpoints.filter((e) => e.name === name);

  return endpoint.length > 0 ? endpoint[0] : null;
}

async function checkEndPoints() {
  const endpoints = await getConfigEndpoints();
  const remaining = [];
  const routeFiles = await _440‍.a("listFiles",listFiles)("./src/route");
  const controllerFiles = await _440‍.a("listFiles",listFiles)("./src/controller");
  const databaseFiles = await _440‍.a("listFiles",listFiles)("./src/database/query");
  for (const endpoint of endpoints) {
    try {
      _440‍.a("has",has)(routeFiles, [`${endpoint.name}.route.ts`]);
      _440‍.a("has",has)(controllerFiles, [`${endpoint.name}.controller.ts`]);
      _440‍.a("has",has)(databaseFiles, [`${endpoint.name}.query.ts`]);
    } catch (error) {
      remaining.push(endpoint);
    }
  }
  return remaining;
}

async function getConfigEndpoints() {
  const config = await require(_440‍.a("realpathSync",realpathSync)("./stacker.json"));
  return config.endpoints;
}

async function generateEndpoints() {
  if (await checkProject(await _440‍.a("listFiles",listFiles)("."))) {
    const remaining = await checkEndPoints();
    for (const endpoint of remaining) {
      const isGenerated = await generateEndpoint(endpoint);
      if (!isGenerated) {
        _440‍.g.console.log(_440‍.a("chalk",chalk).red(`Couldn't generate endpoint ${endpoint.name}`));
      }
    }
  }
}

function getRandomAppName() {
  const files = _440‍.a("readdirSync",readdirSync)(".");
  let last = 0;
  for (const file of files) {
    if (file.startsWith("app")) {
      const num = parseInt(file.slice(file.length - 1, file.length));
      if (num > last) {
        last = num;
      }
    }
  }
  return `app${last + 1}`;
}

       const startGenerate = async (files, options, shortcut = false) => {
  if (shortcut) {
    console.log("Generating endpoints ...");
    await generateEndpoints();
  } else {
    switch (options.generate) {
      case "app":
        console.log("Cloning template ...");
        const appName = options.name ? options.name : getRandomAppName();
        _440‍.a("clone",clone)(
          "https://github.com/amrebada/stacker-api-template-pg",
          "./" + appName,
          () => {
            _440‍.g.console.log(_440‍.a("chalk",chalk).green("Done !"));
            console.log();
            _440‍.g.console.log(_440‍.a("chalk",chalk).cyan(" cd " + appName));
            _440‍.g.console.log(_440‍.a("chalk",chalk).cyan(" stacker ."));
          }
        );

        break;
      case "endpoint":
        console.log("Generating endpoints ...");
        await generateEndpoints();
        break;
      default:
        throw { message: "unknown type of generator" };
    }
  }

  // const srcPath = await checkProject(files, domain);
  // const isGenerated = await generateTemplate(srcPath, domain);
  // if (isGenerated) {
  //   await modifyGeneralFiles(domain);
  //   console.log(`[+] Generate ${domain} successfully`);
  // }
};;_440‍.j(["startGenerate"]);
